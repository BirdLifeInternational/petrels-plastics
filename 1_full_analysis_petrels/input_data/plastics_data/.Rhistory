getmode <- function(v) {
uniqv <- unique(v[!is.nan(v)])
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmean <- function(v) {
mean(v, na.rm = T)
}
#Import plastics data, average between three models
#Convert into an Atlantic-centred plastic density raster
#Win Cowger & Beth Clark 2021
rm(list=ls())
# Load packages and data ####
library(raster)
library(rgdal)
## paste home directory here
setwd("C:/Users/bethany.clark/OneDrive - BirdLife International/Methods/petrels-plastics/1_full_analysis_petrels/input_data/plastics_data")
#Functions----
BootMedian <- function(data) {
B <- 10000
ave <- numeric(B)
n = length(data)
set.seed(34345)
for (i in 1:B) {
boot <- sample(1:n, size=n, replace = TRUE)
ave[i] <- mean(data[boot])
}
return(quantile(ave, c(0.025, 0.5, 0.975), na.rm = T))
}
getmode <- function(v) {
uniqv <- unique(v[!is.nan(v)])
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmean <- function(v) {
mean(v, na.rm = T)
}
getgeomean <- function(x) {
10^mean(log10(x + 1))
}
#Data to read in ----
Lebreton <- as.matrix(read.csv("lebretonmodel_abundance.csv", header = F))
Maximenko <- as.matrix(read.csv("maximenkomodel_abundance.csv", header = F))
VanSeb <- as.matrix(read.csv("vansebillemodel_abundance.csv", header = F))
#Data Cleanup ----
df <- data.frame(van = as.vector(VanSeb), max = as.vector(Maximenko), leb = as.vector(Lebreton))
Average <- 10^rowMeans(mutate_all(df, function(x) log10(x+1)) ,na.rm = T)
library(dplyr)
Average <- 10^rowMeans(mutate_all(df, function(x) log10(x+1)) ,na.rm = T)
dim(Average) <- c(181, 361)
Ave <- raster(Average, xmn = 1, xmx= 361, ymn=-90, ymx=90, crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
AveRaster <- shift(rotate(raster(Average, xmn = 0, xmx= 360, ymn=-90, ymx=90, crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")), dx=0.5)
AveRaster
plot((AveRaster))
plot(log(AveRaster))
plastics <- AveRaster
r178 <- plastics[cellFromCol(plastics,178)]
cols <- as.data.frame(r178)
cols$r179 <- plastics[cellFromCol(plastics,179)]
cols$r180 <- plastics[cellFromCol(plastics,180)]
cols$r182 <- plastics[cellFromCol(plastics,182)]
cols$r183 <- plastics[cellFromCol(plastics,183)]
cols$r184 <- plastics[cellFromCol(plastics,184)]
cols$mean <- rowMeans(cols,na.rm = T)
cols$mean <- ifelse(cols$mean == "NaN",NA,cols$mean)
cols$mean <- ifelse(is.na(cols$r180) & is.na(cols$r182),NA,cols$mean)
plastics[cellFromCol(plastics,181)] <- cols$mean
plot(plastics)
plot(log(plastics))
#Import plastics data, average between three models
#Convert into an Atlantic-centred plastic density raster
#Win Cowger & Beth Clark 2021
rm(list=ls())
# Load packages and data ####
library(raster)
library(rgdal)
library(dplyr)
## paste home directory here
dir <- paste0("C:/Users/bethany.clark/OneDrive - BirdLife International/",
"Methods") ## copy and paste here your working directory
dir_input <- paste0(dir,"/input_data/")
## paste home directory here
dir <- "C:/Users/bethany.clark/OneDrive - BirdLife International/Methods"
dir_input <- paste0(dir,"/input_data/")
dir_input
land <- readOGR(dsn=paste0(dir,"/baselayer"), layer = "world-dissolved")
## paste home directory here
dir <- "C:/Users/bethany.clark/OneDrive - BirdLife International/Methods"
dir_input <- paste0(dir,"/input_data/")
dir_output <- paste0(dir,"/outputs/")
#Data to read in ----
Lebreton <- as.matrix(read.csv(paste0(dir_input,"lebretonmodel_abundance.csv", header = F)))
dir_input <- paste0(dir,"/input_data/plastic_data")
#Data to read in ----
Lebreton <- as.matrix(read.csv(paste0(dir_input,"lebretonmodel_abundance.csv", header = F)))
dir_input <- paste0(dir,"/input_data/plastic_datas")
dir_input <- paste0(dir,"/input_data/plastics_data")
#Data to read in ----
Lebreton <- as.matrix(read.csv(paste0(dir_input,"lebretonmodel_abundance.csv", header = F)))
dir_input <- paste0(dir,"/input_data/plastics_data")
#Data to read in ----
Lebreton <- as.matrix(read.csv(paste0(dir_input,"lebretonmodel_abundance.csv", header = F)))
dir_input <- paste0(dir,"/input_data/plastics_data/")
#Data to read in ----
Lebreton <- as.matrix(read.csv(paste0(dir_input,"lebretonmodel_abundance.csv", header = F)))
#Data to read in ----
Lebreton <- as.matrix(read.csv(paste0(dir_input,"lebretonmodel_abundance.csv"), header = F))
Maximenko <- as.matrix(read.csv(paste0(dir_input,"maximenkomodel_abundance.csv"), header = F))
VanSeb <- as.matrix(read.csv(paste0(dir_input,"vansebillemodel_abundance.csv"), header = F))
#Data Cleanup ----
df <- data.frame(van = as.vector(VanSeb), max = as.vector(Maximenko), leb = as.vector(Lebreton))
#Geomean
Average <- 10^rowMeans(mutate_all(df, function(x) log10(x+1)) ,na.rm = T)
dim(Average) <- c(181, 361)
Ave <- raster(Average, xmn = 1, xmx= 361, ymn=-90, ymx=90, crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
AveRaster <- shift(rotate(raster(Average, xmn = 0, xmx= 360, ymn=-90, ymx=90, crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")), dx=0.5)
plot(log(AveRaster))
plot(log(AveRaster))
plot(log(AveRaster))
plot(log(AveRaster))
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Combine scores for populations into scores for species
## weighted by population size
## And export maps - Beth Clark Mar 2020
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls())
################ LOADING PACKAGES ###################
library(raster)
library(rgdal)
library(cowplot)
library(viridis)
library(stringr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
subset_safely <- function(x, index) {
if (length(x) < index) {
return(NA_character_)
}
x[[index]]
}
str_split_n <- function(string, pattern, n) {
out <- str_split(string, pattern)
vapply(out, subset_safely, character(1L), index = n)
}
######### GENERAL DIRECTIONS AND FILES ##############
## paste home directory here
dir <- "C:/Users/bethany.clark/OneDrive - BirdLife International/Methods"
outputs <- paste0(dir,"/outputs/08_species")
dir.create(outputs)
pop_rasters <- paste0(dir,"/outputs/05_populations")
files <- list.files(pop_rasters, pattern="tif");files
pops <- read.csv(paste0(dir,"/outputs/05_exposure_scores_by_population.csv"))
tracked_seasons <- read.csv(paste0(dir,"/input_data/breeding_months.csv"))
head(tracked_seasons)
pops$breeding <- tracked_seasons$breeding
pops$nonbreeding <- tracked_seasons$nonbreeding
head(pops)
pops$seasons <- ifelse(is.na(pops$nonbreeding)|is.na(pops$nonbreeding),0.5,1)
#combine population maps into species maps, then rescale to 1 ####
#this will weight by number of tracked months
#read in pop sizes
pop_sizes <- read.csv(paste0(dir,"/input_data/population_sizes.csv"))
pop_sizes$site <- NULL
pop_sizes$colony <- NULL
pop_sizes$source_est_n_breeding_pairs <- NULL
pop_sizes$species_pop <- paste(pop_sizes$species,pop_sizes$population,sep="_")
pop_sizes$seasons <- pops$seasons[base::match(pop_sizes$species_pop,pops$sp_pop)]
pop_sizes$pop_x_seasons <- pop_sizes$est_n_breeding_pairs*pop_sizes$seasons
head(pop_sizes)
multipop_species <- unique(pop_sizes$species)
for(i in 1:length(multipop_species)){
species <- subset(pop_sizes,species == multipop_species[i])
species$popsize_weighting <- species$est_n_breeding_pairs/sum(species$est_n_breeding_pairs)
species$pop_x_season_weighting <- species$pop_x_seasons/sum(species$pop_x_seasons)
if(i == 1){
all_sp <- species
} else {
all_sp <- rbind(all_sp,species)
}
}
head(pops)
#match to pops
pops$pop_size_weight <- all_sp$popsize_weighting[match(pops$sp_pop,all_sp$species_pop)]
pops$pop_size_weight <- ifelse(is.na(pops$pop_size_weight),1,pops$pop_size_weight)
pops$pop_x_seasons_weight <- all_sp$pop_x_season_weighting[match(pops$sp_pop,all_sp$species_pop)]
pops$pop_x_seasons_weight <- ifelse(is.na(pops$pop_x_seasons_weight),1,pops$pop_x_seasons_weight)
head(pops)
pops$exposure <- pop_exposure$population_exposure
#species, weighted by pop size ####
df_species <- pops %>%
group_by(species) %>%
summarise(species_exposure = stats::weighted.mean(population_exposure,pop_x_seasons_weight),
unweighted_mean = mean(population_exposure),
n_pops = n()
) %>%
data.frame(); df_species
#test the correlation between weighted and unweighted means
df_species_multipop <- subset(df_species, n_pops != 1)
cor.test(df_species_multipop$species_exposure ,df_species_multipop$unweighted_mean)
plot(df_species_multipop$species_exposure ,df_species_multipop$unweighted_mean)
df_species$seasons <- NA
for (i in 1:length(df_species$species)){
sp_files <- list.files(pop_rasters, pattern=df_species$species[i]);sp_files
sp_weightings <- pops[pops$species == df_species$species[i],];sp_weightings
for(j in 1:length(sp_files)){
a <- raster(paste0(pop_rasters,"/",sp_files[j]))
if(j == 1){
rast_sum <- a*sp_weightings$pop_x_seasons_weight[j]
} else {
rast_sum <- a*sp_weightings$pop_x_seasons_weight[j] + rast_sum
}
}
df_species$seasons[i] <- max(sp_weightings$seasons)
raster_name <- paste0(dir,"/outputs/08_species/",df_species$species[i],".tif")
writeRaster(rast_sum, filename=raster_name, format="GTiff", overwrite=TRUE)
print(df_species$species[i])
print(i)
}
write.csv(df_species,paste0(dir,"/outputs/08_exposure_scores_by_species.csv"),row.names = F)
#then combine rasters for all the species
#weighting those with only breeding season tracking at 0.5
for (i in 1:nrow(df_species)){
sp <- raster(paste0(dir,"/outputs/08_species/",df_species$species[i],".tif"))
a <- sp*df_species$seasons[i]
if(i == 1){
a_all <- a
} else {
a_all <- a+a_all
}
plot(a_all,main=df_species$species[i])
}
plot(a_all)
raster_name_2 <- paste0(dir,"/outputs/08_all_species_distribution.tif")
writeRaster(a_all, filename=raster_name_2,
format="GTiff", overwrite=TRUE)
#then combine rasters for all the species
#weighting those with only breeding season tracking at 0.5
for (i in 1:nrow(df_species)){
sp <- raster(paste0(dir,"/outputs/08_species/",df_species$species[i],".tif"))
a <- sp*df_species$seasons[i]
a_flat <- a
a_flat[a_flat != 0] <- 1
if(i == 1){
a_all <- a
a_all_flat <- a_flat
} else {
a_all <- a+a_all
a_all_flat <- a_flat + a_all_flat
}
}
plot(a_all)
plot(a_all)
rm(list=ls())
################ LOADING PACKAGES ###################
library(raster) #3.1-5
library(rgdal) #1.4-8
library(rgeos)#0.5-3
library(RColorBrewer)#1.1-2
library(sf)#0.9-4
library(tidyverse)#1.3.0
library(sp) #1.3-2
library(viridis)#0.5.1
## paste home directory here
dir <- "C:/Users/bethany.clark/OneDrive - BirdLife International/Methods"
land <- readOGR(dsn=paste0(dir,"/input_data/baselayer"), layer = "world-dissolved")
pops <- read.csv(paste0(dir,"/outputs/06_phenology.csv"))
#EEZ ####
#Flanders Marine Institute (2020). Union of the ESRI Country shapefile and the Exclusive Economic Zones (version 3). Available online at https://www.marineregions.org/. https://doi.org/10.14284/403. Consulted on 2021-03-04.
eez_file <- readOGR(dsn=paste0(dir,"/input_data/EEZ_land_union_v3_202003"), layer = "EEZ_Land_v3_202030")
#make a polygon for the high seas
#1. make polygon covering whole earth
y_coords <- c(90,90,-90,-90,90)
x_coords <- c(-180,180,180,-180,-180)
poly1 <- sp::Polygon(cbind(x_coords,y_coords))
firstPoly <- sp::Polygons(list(poly1), ID = "High Seas")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
#2. intersect with eezs
crs(firstSpatialPoly) <- crs(eez_file)
highseas <- gDifference(firstSpatialPoly,eez_file)
plot(highseas,col="green")
plot(eez_file, add=T)
plot(eez_file)
eez <- bind(eez_file,highseas)
#to check
plot(highseas,col="green")
plot(eez[1,],add=T,col="red",border="orange");eez[1,]
rm(eez_file)
eez@data$UNION[nrow(eez@data)] <- "High Seas"
eez@data$TERRITORY1[nrow(eez@data)] <- "High Seas"
eez@data$SOVEREIGN1[nrow(eez@data)] <- "High Seas"
eez@data$POL_TYPE[nrow(eez@data)] <- "High Seas"
eez@data$AREA_KM2[nrow(eez@data)] <- 219116810
tail(eez@data)
plot(eez,col="blue")
sp_files <- list.files(paste0(dir,"/outputs/06_species/"))
bird_dist <- raster(paste0(dir,"/outputs/08_all_species_distribution.tif"))
b <- bird_dist
b[is.na(b)] <- 0
b_sum1 <- b/sum(getValues(b))
b_sum1[is.na(bird_dist)] <- NA
b_sum1[b_sum1 == 0] <- NA
#read in plastics data
plastics <- raster(paste0(dir,"/outputs/00_PlasticsRaster.tif"))
## rescale to 1
plastics2 <- plastics
plastics2[is.na(plastics2)] <- 0
p_sum1    <- plastics2/sum(getValues(plastics2))
p_sum1[is.na(plastics)] <- NA
yelblus <- c(brewer.pal(n = 9, name = "YlGnBu"),"#00172e")
col_birds <- c(colorRampPalette(yelblus)(1000))
# exposure ####
exposure <- b_sum1 * p_sum1
exposure[exposure == 0] <- NA
e_cap <- exposure
e_max <- (max(getValues(exposure),na.rm = T))/100
e_cap[e_cap > e_max] <- e_max
exposure_proj <- projectRaster(e_cap, crs = proj)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Calculate proportions of exposure among marine
## political regions (EEZs and the high seas)
##
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls())
################ LOADING PACKAGES ###################
library(raster) #3.1-5
library(rgdal) #1.4-8
library(rgeos)#0.5-3
library(RColorBrewer)#1.1-2
library(sf)#0.9-4
library(tidyverse)#1.3.0
library(sp) #1.3-2
library(viridis)#0.5.1
library(cowplot) #1.0.0
library(stringr)#1.4.0
library(geomerge)#0.3.2
library(maptools)#1.0-1
library(gridExtra)#2.3
library(adehabitatHR)
######### GENERAL DIRECTIONS AND FILES ##############
## paste home directory here
dir <- "C:/Users/bethany.clark/OneDrive - BirdLife International/Methods"
land <- readOGR(dsn=paste0(dir,"/input_data/baselayer"), layer = "world-dissolved")
pops <- read.csv(paste0(dir,"/outputs/06_phenology.csv"))
#EEZ ####
#Flanders Marine Institute (2020). Union of the ESRI Country shapefile and the Exclusive Economic Zones (version 3). Available online at https://www.marineregions.org/. https://doi.org/10.14284/403. Consulted on 2021-03-04.
eez_file <- readOGR(dsn=paste0(dir,"/input_data/EEZ_land_union_v3_202003"), layer = "EEZ_Land_v3_202030")
#make a polygon for the high seas
#1. make polygon covering whole earth
y_coords <- c(90,90,-90,-90,90)
x_coords <- c(-180,180,180,-180,-180)
poly1 <- sp::Polygon(cbind(x_coords,y_coords))
firstPoly <- sp::Polygons(list(poly1), ID = "High Seas")
str(firstPoly,1)
firstSpatialPoly <- sp::SpatialPolygons(list(firstPoly))
firstSpatialPoly
#2. intersect with eezs
crs(firstSpatialPoly) <- crs(eez_file)
highseas <- gDifference(firstSpatialPoly,eez_file)
plot(highseas,col="green")
plot(eez_file, add=T)
plot(eez_file)
eez <- bind(eez_file,highseas)
#to check
plot(highseas,col="green")
plot(eez[1,],add=T,col="red",border="orange");eez[1,]
rm(eez_file)
eez@data$UNION[nrow(eez@data)] <- "High Seas"
eez@data$TERRITORY1[nrow(eez@data)] <- "High Seas"
eez@data$SOVEREIGN1[nrow(eez@data)] <- "High Seas"
eez@data$POL_TYPE[nrow(eez@data)] <- "High Seas"
eez@data$AREA_KM2[nrow(eez@data)] <- 219116810
tail(eez@data)
plot(eez,col="blue")
sp_files <- list.files(paste0(dir,"/outputs/06_species/"))
bird_dist <- raster(paste0(dir,"/outputs/08_all_species_distribution.tif"))
b <- bird_dist
b[is.na(b)] <- 0
b_sum1 <- b/sum(getValues(b))
b_sum1[is.na(bird_dist)] <- NA
b_sum1[b_sum1 == 0] <- NA
#read in plastics data
plastics <- raster(paste0(dir,"/outputs/00_PlasticsRaster.tif"))
## rescale to 1
plastics2 <- plastics
plastics2[is.na(plastics2)] <- 0
p_sum1    <- plastics2/sum(getValues(plastics2))
p_sum1[is.na(plastics)] <- NA
# exposure ####
exposure <- b_sum1 * p_sum1
exposure[exposure == 0] <- NA
e_cap <- exposure
e_max <- (max(getValues(exposure),na.rm = T))/100
e_cap[e_cap > e_max] <- e_max
exposure_proj <- projectRaster(e_cap, crs = proj)
proj
e_cap
plot(exposure)
#overlap with eez ####
eez_over <- raster::extract(exposure,eez,fun=sum,na.rm = T)
eez_over
eez$over <- eez_over
eez$over <- eez_over
eez
rank_eezs <- as.data.frame(eez_proj@data)
rank_eezs <- as.data.frame(eez@data)
rank_eezs
rank_eezs <- rank_eezs[order(-rank_eezs$over),]
head(rank_eezs)
rank_used <- subset(rank_eezs,over != 0)
rank_used$prop <- rank_used$over/sum(rank_used$over)
write.csv(rank_used,paste0(dir,"/11_eezs_used_all_species.csv"),
row.names = F)
View(rank_used)
names(rank_used)
rank_used
write.csv(rank_used,paste0(dir,"/11_eezs_used_all_species.csv"),
row.names = F)
#need to combine the species in the same way as in the density section for this to work.
#otherwise biased towards countries with many populations.
eezs_used <- rank_used
eezs_used$MRGID_EEZ <- NULL; eezs_used$MRGID_TER1 <- NULL
eezs_used$MRGID_SOV1 <- NULL; eezs_used$MRGID_TER2 <- NULL
eezs_used$MRGID_SOV2 <- NULL; eezs_used$MRGID_TER3 <- NULL
eezs_used$MRGID_SOV3 <- NULL; eezs_used$ISO_TER1 <- NULL
eezs_used$ISO_SOV1 <- NULL; eezs_used$ISO_TER2 <- NULL
eezs_used$ISO_SOV2 <- NULL; eezs_used$ISO_TER3 <- NULL
eezs_used$ISO_SOV3 <- NULL; eezs_used$UN_TER1 <- NULL
eezs_used$UN_TER2 <- NULL; eezs_used$UN_TER3 <- NULL
eezs_used$UN_SOV1 <- NULL; eezs_used$UN_SOV2 <- NULL
eezs_used$UN_SOV3 <- NULL; eezs_used$Y_1 <- NULL
eezs_used$x_1 <- NULL; eezs_used$id <- NULL
head(eezs_used)
summary(eezs_used$over)
#figure out what to do with multiple sovereign cases
unique(eezs_used$POL_TYPE)
table(eezs_used$POL_TYPE)
pol_type <- eezs_used %>%
group_by(POL_TYPE) %>%
summarise(total = sum(over),
prop = sum(prop),
label = "total") %>%
data.frame();pol_type
ggplot(pol_type,aes(x=label,y=total,fill=POL_TYPE))+
geom_bar(stat="identity",position="stack")
#all joint regimes have only 2 soveriegns.
#divide the total in half and add to the totals of each country
joint_regime <- subset(eezs_used,POL_TYPE == "Joint regime (EEZ)")
joint_regime$over <- joint_regime$over/2
joint_regime$prop <- joint_regime$prop/2
joint_regime2 <- joint_regime
joint_regime$TERRITORY2 <- NA
joint_regime$SOVEREIGN2 <- NA
joint_regime2$TERRITORY1 <- joint_regime2$TERRITORY2
joint_regime2$SOVEREIGN1 <- joint_regime2$SOVEREIGN2
joint_regime2$TERRITORY2 <- NA
joint_regime2$SOVEREIGN2 <- NA
eezs_used_notjoint <- subset(eezs_used,POL_TYPE != "Joint regime (EEZ)")
eezs_used2 <- rbind(eezs_used_notjoint,joint_regime,joint_regime2)
eezs_used <- eezs_used2
italy <- c("Vatican City","San Marino")
eezs_used$UNION <- ifelse(eezs_used$UNION %in% italy, "Italy",eezs_used$UNION)
eezs_used$TERRITORY1 <- ifelse(eezs_used$TERRITORY1 %in% italy, "Italy",eezs_used$TERRITORY1)
eezs_used$SOVEREIGN1 <- ifelse(eezs_used$SOVEREIGN1 %in% italy, "Italy",eezs_used$SOVEREIGN1)
#Bouvet, can be added to the high seas.
eezs_used$TERRITORY1 <- ifelse(eezs_used$UNION == "Bouvet", "High Seas",eezs_used$TERRITORY1)
eezs_used$SOVEREIGN1 <- ifelse(eezs_used$UNION == "Bouvet", "High Seas",eezs_used$SOVEREIGN1)
eezs_used$UNION <- ifelse(eezs_used$UNION == "Bouvet", "High Seas",eezs_used$UNION)
eezs_used$cat <- ifelse(eezs_used$POL_TYPE == "Overlapping claim",
paste(eezs_used$SOVEREIGN1,eezs_used$SOVEREIGN2,eezs_used$SOVEREIGN3,sep="_")
,eezs_used$SOVEREIGN1)
table(eezs_used$overlapping_claim)
eezs_country <- eezs_used %>%
group_by(cat) %>%
summarise(total = sum(over),
prop = sum(prop),
label = "total") %>%
data.frame()
eezs_country
eezs_country
eezs_country$cat2 <- ifelse(eezs_country$total < 2.575042e-07,
"low impact countries",eezs_country$cat)
eezs_country
eezs_country_lowimpact <- eezs_country[eezs_country$cat2 == "low impact countries",]
eezs_country_highimpact <- eezs_country[eezs_country$cat2 != "low impact countries",]
eezs_country_lowimpact_summary <- c("lowimp",sum(eezs_country_lowimpact$total),
mean(eezs_country_lowimpact$prop),
"total","low impact countries")
eezs_country_highimpact[nrow(eezs_country_highimpact)+1,] <- eezs_country_lowimpact_summary
eezs_country_highimpact$total <- as.numeric(eezs_country_highimpact$total)
eezs_country_highimpact <- eezs_country_highimpact[order(-eezs_country_highimpact$total),]
rank_list <- eezs_country_highimpact$cat2[order(-eezs_country_highimpact$total)]
rank_list <- rank_list[rank_list != "low impact countries"]
rank_list <- rank_list[rank_list != "Overlapping claim"]
level_list <- c(rank_list,"low impact countries","Overlapping claim")
eezs_country_highimpact$cat2 <- as.factor(eezs_country_highimpact$cat2)
eezs_country_highimpact$cat2 <- factor(eezs_country_highimpact$cat2,
levels = as.factor(level_list))
eezs_country_highimpact$percent <- (eezs_country_highimpact$total/
sum(eezs_country_highimpact$total))*100
plot1 <- ggplot(eezs_country_highimpact,aes(x=label,y=total,fill=cat2))+
geom_bar(stat="identity",position="fill",colour="white") +
scale_fill_viridis(option="inferno",discrete = T) +
theme_bw()
plot1
eezs_country
write.csv(eezs_country,
paste0(dir,"/outputs/11_eezs_by_country.csv"),
row.names=F)
head(rank_eezs)
head(rank_used)
head(eezs_used)
